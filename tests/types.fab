#
# RUN: %parse %s > %t
# RUN: %check %t %s
#

# CHECK: (file

# CHECK: (value foo =
# CHECK:   (typeDeclaration type (type (recordType record [ ])))
# CHECK: )
foo = type record[];

# CHECK: (value bar =
# CHECK:   (typeDeclaration type
# CHECK:     (recordType record [
# CHECK:       (fieldType x : (type (simpleType int)))
# CHECK:       ,
# CHECK:       (fieldType y : (type (simpleType string)))
# CHECK:       ,
# CHECK:       (fieldType z :
# CHECK:         (recordType record [
# CHECK:           (fieldType wibble : (type (simpleType int)))
# CHECK:         ])
# CHECK:       )
# CHECK:     ])
# CHECK:   )
# CHECK: )
bar = type record[x:int, y:string, z:record[wibble:int]];

# CHECK: (value baz =
# CHECK:   (typeDeclaration
# CHECK:     (functionType
# CHECK:       ( (typeList (type (simpleType int))) )
# CHECK:       -> (type (simpleType int))
# CHECK:     )
# CHECK:   )
# CHECK: ;)
baz = type (int)->int;

# CHECK: (value wibble =
# CHECK:   (typeDeclaration
# CHECK:     (functionType
# CHECK:       ( (typeList (type (simpleType int))) )
# CHECK:       ->
# CHECK:       (functionType
# CHECK:         (typeList (
# CHECK:           (parametricType
# CHECK:             (simpleType list)
# CHECK:             [ (typeList (type (simpleType string))) ]
# CHECK:           )
# CHECK:         ) )
# CHECK:         -> (type (simpleType int))
# CHECK:       )
# CHECK:     )
# CHECK:   )
# CHECK: ;)
wibble = type (int)->(list[string])->int;

# CHECK: <EOF>)
