#
# RUN: %parse %s > %t
# RUN: %check %t %s
#

# CHECK:  (value increment =
# CHECK:    (function function (
# CHECK:        (parameters (parameter x : (type (simpleType int))))
# CHECK:      ) : (type (simpleType int))
# CHECK:      (nameReference x)
# CHECK:      (addOp +)
# CHECK:      (literal 1)
# CHECK:    )
# CHECK:  ;)
increment = function(x:int): int x + 1;

# CHECK: (value copy = (expression (term (nameReference increment))) ;)
copy = increment;

# CHECK:  (value apply =
# CHECK:    (function function (
# CHECK:        (parameters
# CHECK:          (parameter fn :
# CHECK:            (functionType
# CHECK:              ( (typeList (type (simpleType int))) )
# CHECK:              ->
# CHECK               (type (simpleType int))
# CHECK:            )
# CHECK:          )
# CHECK:          (parameter x : (type (simpleType int)))
# CHECK:        )
# CHECK:      ) : (type (simpleType int))
# CHECK:      (expression
# CHECK:        (nameReference fn)
# CHECK:        (
# CHECK:          (arguments
# CHECK:            (nameReference x)
# CHECK:          )
# CHECK:        )
# CHECK:      )
# CHECK:    )
# CHECK:  ;)
apply = function(fn:(int)->int, x:int): int
	fn(x);
