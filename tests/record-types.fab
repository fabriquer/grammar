#
# RUN: %parse %s > %t
# RUN: %check %t %s
#

# CHECK:  (value foo :
# CHECK:    (type
# CHECK:      (recordType record [
# CHECK:        (fieldType foo : (type (typeReference string)))
# CHECK:        (fieldType bar : (type (typeReference string)))
# CHECK:      ])
# CHECK:    )
# CHECK:    =
# CHECK:    (record record {
# CHECK:      (value foo = (expression (term (literal 'hi'))) ;)
# CHECK:  (value bar = (expression (term (literal 'world'))) ;)
# CHECK:  }))) ;)
foo:record[foo:string, bar:string] = record { foo = 'hi'; bar = 'world'; };

# CHECK:  (value bar :
# CHECK:    (type
# CHECK:      (recordType record [
# CHECK:        (fieldType def : (type (typeReference string)))
# CHECK:        (fieldType ref : (type (typeReference string)))
# CHECK:      ])
# CHECK:    )
# CHECK:    =
# CHECK:    (record record {
bar:record[def:string, ref:string] = record
{
	# CHECK: (value def = (expression (term (literal 'Hello, world!'))) ;)
	def = 'Hello, world!';

	# CHECK: (value ref = (expression (term (nameReference def))) ;)
	ref = def;

# CHECK:    })
# CHECK:  ;)
};

# CHECK: (value SomeRecordType :
# CHECK:    (type (typeReference type))
# CHECK:    =
# CHECK:    (expression (
# CHECK:      term (
# CHECK:        typeDeclaration type (
# CHECK:          type (
# CHECK:            recordType record [
# CHECK:            (fieldType hello : (type (typeReference string)))
# CHECK:            ,
# CHECK:            (fieldType goodbye : (
# CHECK:              type (
# CHECK:                recordType record [
# CHECK:                (fieldType ok : (type (typeReference string)))
# CHECK:                ])))
# CHECK:            ])))))
# CHECK:    ;)
SomeRecordType:type = type record[hello:string, goodbye:record[ok:string]];
