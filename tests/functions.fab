#
# RUN: %parse %s > %t
# RUN: %check %t %s
#

# CHECK: (file

# CHECK:  (value foo =
# CHECK:    (function function (
# CHECK:      (parameters
# CHECK:        (parameter ints :
# CHECK:          [[INT_LIST:\(type \(parametricType \(simpleType list\) \[ \(typeList \(type \(simpleType int\)\)\) \]\)\)]]
# CHECK:        )
# CHECK:      )
# CHECK:      : [[INT_LIST]]
# CHECK:      (compoundExpr {
# CHECK:        (value local_var = (expression (term (literal 42))) ;)
# CHECK:        (expression
# CHECK:          (foreach
# CHECK:          )
# CHECK:        )
# CHECK:      })
# CHECK:    )
# CHECK: ;)
foo = function(ints:list[int]): list[int]
{
	local_var = 42;

	foreach x <- ints
	{
		f(x)
	}
};

# CHECK:  (value bar =
# CHECK:    (function function
# CHECK:      (parameters
# CHECK:        (parameter names :
# CHECK:          [[STRING_LIST:\(type \(parametricType \(simpleType list\) \[ \(typeList \(type \(simpleType string\)\)\) \]\)\)]]
# CHECK:      )
# CHECK:      :
# CHECK:      [[FILE_LIST:\(type \(parametricType \(simpleType list\) \[ \(typeList \(type \(simpleType file\)\)\) \]\)\)]]
# CHECK:      (expression
# CHECK:        (foreach foreach name <-
# CHECK:          (nameReference names)
# CHECK:          (expression (term (term (nameReference file))
# CHECK:            ( (arguments
# CHECK:              (positionalArguments
# CHECK:                (nameReference name)
# CHECK:              )
# CHECK:            ) )
# CHECK:          ))
# CHECK:        )
# CHECK:      )
# CHECK:   ;)
bar = function(names:list[string]): list[file]
	foreach name <- names
		file(name);

# CHECK: (value baz :
# CHECK:   (functionType
# CHECK:     ( (typeList (type (simpleType int))) )
# CHECK:     ->
# CHECK:     (simpleType int)
# CHECK:   )
# CHECK:   =
# CHECK:   (function
# CHECK:     ( (parameters (parameter x : (type (simpleType int)))) )
# CHECK:     :
# CHECK:     (type (simpleType int))
# CHECK:     (expression
# CHECK:       (term (term (nameReference f))
# CHECK:         ( (arguments
# CHECK:           (positionalArguments
# CHECK:             (nameReference x)
# CHECK:           )
# CHECK:         ) )
# CHECK:       )
# CHECK:     )
# CHECK:   )
# CHECK: ;)
baz:(int)->int = function(x:int): int f(x);


# CHECK: (value wibble :
# CHECK:   (functionType
# CHECK:     ( )
# CHECK:     ->
# CHECK:     (functionType
# CHECK:       ( )
# CHECK:       ->
# CHECK:       (simpleType int)
# CHECK:     )
# CHECK:   )
# CHECK:   =
# CHECK:   (function
# CHECK:     ( parameters )
# CHECK:     :
# CHECK:     (functionType ( ) -> (type (simpleType int)))
# CHECK:       (compoundExpr {
# CHECK:         (function
# CHECK:           ( parameters )
# CHECK:           :
# CHECK:           (simpleType int)
# CHECK:           (compoundExpr {
# CHECK:             (literal 42)
# CHECK:           })
# CHECK:         )
# CHECK:       })
# CHECK:   )
# CHECK: ;)
wibble:()->()->int = function(): ()->int
{
	function(): int
	{
		42
	}
};

# CHECK: <EOF>)
